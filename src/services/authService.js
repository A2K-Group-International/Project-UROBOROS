import { supabase } from "./supabaseClient"; // Supabase client import

// Register user
const registerUser = async ({
  firstName,
  lastName,
  email,
  password,
  contactNumber,
  role = "parishioner",
}) => {
  try {
    // Sign up the user via Supabase Auth
    const { data: user, error: signUpError } = await supabase.auth.signUp({
      email,
      password,
    });

    if (signUpError) throw signUpError;

    // Insert user details into the 'users' table
    const { error: insertError } = await supabase.from("users").insert([
      {
        id: user.user.id, // UUID generated by Supabase Auth
        email: user.user.email,
        first_name: firstName,
        last_name: lastName,
        contact_number: contactNumber,
        role, // Set role as needed
        is_confirmed: false,
      },
    ]);

    if (insertError) throw insertError;

    const { data: newUserFamily, error: familyError } = await supabase
      .from("family_group")
      .upsert([
        {
          user_id: user.user.id,
        },
      ])
      .select();

    if (familyError) throw familyError;

    // Insert the user data into the 'parents' table
    const { error: parentsInsertError } = await supabase
      .from("parents")
      .insert([
        {
          parishioner_id: user.user.id,
          first_name: firstName,
          last_name: lastName,
          contact_number: contactNumber,
          family_id: newUserFamily[0].id,
        },
      ]);

    if (parentsInsertError) throw parentsInsertError;

    return user;
  } catch (error) {
    console.error("Error during sign-up:", error);
    throw error; // Re-throw the error to be handled by the calling function
  }
};

// Update user's contact number
const updateContact = async (userId, newContactNumber) => {
  try {
    const { data: userData, error: userError } = await supabase
      .from("users")
      .update({ contact_number: newContactNumber })
      .eq("id", userId);

    if (userError) throw userError;

    const { data: parentData, error: parentError } = await supabase
      .from("parents")
      .update({ contact_number: newContactNumber })
      .eq("parishioner_id", userId);

    if (parentError) throw parentError;

    return { userData, parentData };
  } catch (error) {
    console.error("Error updating contact:", error);
  }
};

const registerCoParent = async ({
  parentId,
  firstName,
  lastName,
  email,
  password,
  contactNumber,
  role = "coparent",
}) => {
  try {
    // Sign up the user via Supabase Auth
    const { data: user, error: signUpError } = await supabase.auth.signUp({
      email,
      password,
    });

    if (signUpError) throw signUpError;

    // Insert user details into the 'users' table
    const { error: insertError } = await supabase.from("users").insert([
      {
        id: user.user.id,
        email: user.user.email,
        first_name: firstName,
        last_name: lastName,
        contact_number: contactNumber,
        role,
        is_confirmed: false,
      },
    ]);

    if (insertError) throw insertError;

    // Insert the co parent to family_group
    // const { error: familyError } = await supabase.from("family_group").upsert([
    //   {
    //     user_id: user.user.id,
    //   },
    // ]);

    // if (familyError) throw familyError;

    // Insert the user data into the 'parents' table
    const { error: parentsInsertError } = await supabase
      .from("parents")
      .update({
        parishioner_id: user.user.id,
      })
      .eq("id", parentId);

    if (parentsInsertError) throw parentsInsertError;

    return user;
  } catch (error) {
    console.error("Error during sign-up:", error);
    throw error; // Re-throw the error to be handled by the calling function
  }
};

const fetchUserById = async (userId) => {
  try {
    if (!userId) throw new Error("User ID is required");

    const { data, error } = await supabase
      .from("users")
      .select("*")
      .eq("id", userId)
      .single();

    if (error) throw error;

    return data;
  } catch (error) {
    console.error("Error fetching user data:", error);
    throw error;
  }
};

const resendEmailConfirmation = async (email) => {
  const { error } = await supabase.auth.resend({
    type: "signup",
    email,
    options: {
      emailRedirectTo: "https://gems.a2kgroup.org/dashboard",
    },
  });
  if (error) {
    throw new Error(`Error resending email confirmation: ${error.message}`);
  }

  return { success: true };
};

export {
  registerUser,
  updateContact,
  fetchUserById,
  registerCoParent,
  resendEmailConfirmation,
};
